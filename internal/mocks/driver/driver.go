// Code generated by MockGen. DO NOT EDIT.
// Source: driver/driver.go
//
// Generated by this command:
//
//	mockgen -source=driver/driver.go -destination=internal/mocks/driver/driver.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	driver "github.com/LucasMateus-eng/operations-service/driver"
	gomock "go.uber.org/mock/gomock"
)

// MockReading is a mock of Reading interface.
type MockReading struct {
	ctrl     *gomock.Controller
	recorder *MockReadingMockRecorder
}

// MockReadingMockRecorder is the mock recorder for MockReading.
type MockReadingMockRecorder struct {
	mock *MockReading
}

// NewMockReading creates a new mock instance.
func NewMockReading(ctrl *gomock.Controller) *MockReading {
	mock := &MockReading{ctrl: ctrl}
	mock.recorder = &MockReadingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReading) EXPECT() *MockReadingMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockReading) GetById(ctx context.Context, id int) (*driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockReadingMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockReading)(nil).GetById), ctx, id)
}

// GetByIdWithEagerLoading mocks base method.
func (m *MockReading) GetByIdWithEagerLoading(ctx context.Context, id int) (*driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdWithEagerLoading", ctx, id)
	ret0, _ := ret[0].(*driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdWithEagerLoading indicates an expected call of GetByIdWithEagerLoading.
func (mr *MockReadingMockRecorder) GetByIdWithEagerLoading(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdWithEagerLoading", reflect.TypeOf((*MockReading)(nil).GetByIdWithEagerLoading), ctx, id)
}

// GetByUserId mocks base method.
func (m *MockReading) GetByUserId(ctx context.Context, userId int) (*driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", ctx, userId)
	ret0, _ := ret[0].(*driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockReadingMockRecorder) GetByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockReading)(nil).GetByUserId), ctx, userId)
}

// GetByUserIdWithEagerLoading mocks base method.
func (m *MockReading) GetByUserIdWithEagerLoading(ctx context.Context, userId int) (*driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserIdWithEagerLoading", ctx, userId)
	ret0, _ := ret[0].(*driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserIdWithEagerLoading indicates an expected call of GetByUserIdWithEagerLoading.
func (mr *MockReadingMockRecorder) GetByUserIdWithEagerLoading(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIdWithEagerLoading", reflect.TypeOf((*MockReading)(nil).GetByUserIdWithEagerLoading), ctx, userId)
}

// List mocks base method.
func (m *MockReading) List(ctx context.Context, specification *driver.DriverSpecification) (*[]driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, specification)
	ret0, _ := ret[0].(*[]driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockReadingMockRecorder) List(ctx, specification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockReading)(nil).List), ctx, specification)
}

// ListWithEagerLoading mocks base method.
func (m *MockReading) ListWithEagerLoading(ctx context.Context, specification *driver.DriverSpecification) (*[]driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithEagerLoading", ctx, specification)
	ret0, _ := ret[0].(*[]driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithEagerLoading indicates an expected call of ListWithEagerLoading.
func (mr *MockReadingMockRecorder) ListWithEagerLoading(ctx, specification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithEagerLoading", reflect.TypeOf((*MockReading)(nil).ListWithEagerLoading), ctx, specification)
}

// MockWriting is a mock of Writing interface.
type MockWriting struct {
	ctrl     *gomock.Controller
	recorder *MockWritingMockRecorder
}

// MockWritingMockRecorder is the mock recorder for MockWriting.
type MockWritingMockRecorder struct {
	mock *MockWriting
}

// NewMockWriting creates a new mock instance.
func NewMockWriting(ctrl *gomock.Controller) *MockWriting {
	mock := &MockWriting{ctrl: ctrl}
	mock.recorder = &MockWritingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriting) EXPECT() *MockWritingMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWriting) Create(ctx context.Context, d *driver.Driver) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, d)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWritingMockRecorder) Create(ctx, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWriting)(nil).Create), ctx, d)
}

// Delete mocks base method.
func (m *MockWriting) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWritingMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWriting)(nil).Delete), ctx, id)
}

// Update mocks base method.
func (m *MockWriting) Update(ctx context.Context, d *driver.Driver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWritingMockRecorder) Update(ctx, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWriting)(nil).Update), ctx, d)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, d *driver.Driver) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, d)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, d)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, id)
}

// GetById mocks base method.
func (m *MockRepository) GetById(ctx context.Context, id int) (*driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockRepositoryMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRepository)(nil).GetById), ctx, id)
}

// GetByIdWithEagerLoading mocks base method.
func (m *MockRepository) GetByIdWithEagerLoading(ctx context.Context, id int) (*driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdWithEagerLoading", ctx, id)
	ret0, _ := ret[0].(*driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdWithEagerLoading indicates an expected call of GetByIdWithEagerLoading.
func (mr *MockRepositoryMockRecorder) GetByIdWithEagerLoading(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdWithEagerLoading", reflect.TypeOf((*MockRepository)(nil).GetByIdWithEagerLoading), ctx, id)
}

// GetByUserId mocks base method.
func (m *MockRepository) GetByUserId(ctx context.Context, userId int) (*driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", ctx, userId)
	ret0, _ := ret[0].(*driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockRepositoryMockRecorder) GetByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockRepository)(nil).GetByUserId), ctx, userId)
}

// GetByUserIdWithEagerLoading mocks base method.
func (m *MockRepository) GetByUserIdWithEagerLoading(ctx context.Context, userId int) (*driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserIdWithEagerLoading", ctx, userId)
	ret0, _ := ret[0].(*driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserIdWithEagerLoading indicates an expected call of GetByUserIdWithEagerLoading.
func (mr *MockRepositoryMockRecorder) GetByUserIdWithEagerLoading(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIdWithEagerLoading", reflect.TypeOf((*MockRepository)(nil).GetByUserIdWithEagerLoading), ctx, userId)
}

// List mocks base method.
func (m *MockRepository) List(ctx context.Context, specification *driver.DriverSpecification) (*[]driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, specification)
	ret0, _ := ret[0].(*[]driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRepositoryMockRecorder) List(ctx, specification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List), ctx, specification)
}

// ListWithEagerLoading mocks base method.
func (m *MockRepository) ListWithEagerLoading(ctx context.Context, specification *driver.DriverSpecification) (*[]driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithEagerLoading", ctx, specification)
	ret0, _ := ret[0].(*[]driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithEagerLoading indicates an expected call of ListWithEagerLoading.
func (mr *MockRepositoryMockRecorder) ListWithEagerLoading(ctx, specification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithEagerLoading", reflect.TypeOf((*MockRepository)(nil).ListWithEagerLoading), ctx, specification)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, d *driver.Driver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, d)
}

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUseCase) Create(ctx context.Context, d *driver.Driver) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, d)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUseCaseMockRecorder) Create(ctx, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUseCase)(nil).Create), ctx, d)
}

// Delete mocks base method.
func (m *MockUseCase) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUseCaseMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUseCase)(nil).Delete), ctx, id)
}

// GetByDriverId mocks base method.
func (m *MockUseCase) GetByDriverId(ctx context.Context, id int) (*driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDriverId", ctx, id)
	ret0, _ := ret[0].(*driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDriverId indicates an expected call of GetByDriverId.
func (mr *MockUseCaseMockRecorder) GetByDriverId(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDriverId", reflect.TypeOf((*MockUseCase)(nil).GetByDriverId), ctx, id)
}

// GetByIdWithEagerLoading mocks base method.
func (m *MockUseCase) GetByIdWithEagerLoading(ctx context.Context, id int) (*driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdWithEagerLoading", ctx, id)
	ret0, _ := ret[0].(*driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdWithEagerLoading indicates an expected call of GetByIdWithEagerLoading.
func (mr *MockUseCaseMockRecorder) GetByIdWithEagerLoading(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdWithEagerLoading", reflect.TypeOf((*MockUseCase)(nil).GetByIdWithEagerLoading), ctx, id)
}

// GetByUserId mocks base method.
func (m *MockUseCase) GetByUserId(ctx context.Context, userId int) (*driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", ctx, userId)
	ret0, _ := ret[0].(*driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockUseCaseMockRecorder) GetByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockUseCase)(nil).GetByUserId), ctx, userId)
}

// GetByUserIdWithEagerLoading mocks base method.
func (m *MockUseCase) GetByUserIdWithEagerLoading(ctx context.Context, userId int) (*driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserIdWithEagerLoading", ctx, userId)
	ret0, _ := ret[0].(*driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserIdWithEagerLoading indicates an expected call of GetByUserIdWithEagerLoading.
func (mr *MockUseCaseMockRecorder) GetByUserIdWithEagerLoading(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIdWithEagerLoading", reflect.TypeOf((*MockUseCase)(nil).GetByUserIdWithEagerLoading), ctx, userId)
}

// List mocks base method.
func (m *MockUseCase) List(ctx context.Context, specification *driver.DriverSpecification) (*[]driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, specification)
	ret0, _ := ret[0].(*[]driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUseCaseMockRecorder) List(ctx, specification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUseCase)(nil).List), ctx, specification)
}

// ListWithEagerLoading mocks base method.
func (m *MockUseCase) ListWithEagerLoading(ctx context.Context, specification *driver.DriverSpecification) (*[]driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithEagerLoading", ctx, specification)
	ret0, _ := ret[0].(*[]driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithEagerLoading indicates an expected call of ListWithEagerLoading.
func (mr *MockUseCaseMockRecorder) ListWithEagerLoading(ctx, specification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithEagerLoading", reflect.TypeOf((*MockUseCase)(nil).ListWithEagerLoading), ctx, specification)
}

// Update mocks base method.
func (m *MockUseCase) Update(ctx context.Context, d *driver.Driver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUseCaseMockRecorder) Update(ctx, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUseCase)(nil).Update), ctx, d)
}
